<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="egovframework.DustMapper">
	<insert id="upsertStation" parameterType="DustDto">
	    INSERT INTO dust_station (
	      station_name, addr, mang_name, dmX, dmY, station_active, sido_name
	    )
	    VALUES (
	      #{stationName}, #{stationAddr}, #{mangName}, #{lat}, #{lon}, #{stationActive}
	    )
	    ON CONFLICT (station_name)
	    DO UPDATE SET
	      addr 		= EXCLUDED.addr,
	      mang_name = EXCLUDED.mang_name,
	      dmx 		= EXCLUDED.dmx,
	      dmy 		= EXCLUDED.dmy,
	      station_active = EXCLUDED.station_active
	</insert>
	
	<select id="getDustStation" resultType="DustDto">
	    SELECT station_name AS stationName,
	           addr         AS stationAddr,
	           mang_name    AS mangName,
	           dmx          AS lon,
	           dmy          AS lat,
	           station_active AS stationActive
	    FROM dust_station
	    WHERE station_active = true
	    ORDER BY station_name
	</select>
  	
  	<update id="deactivateAllStations">
	    UPDATE dust_station
	    SET station_active = false
	</update>
	
	<insert id="upsertDustMeasure" parameterType="List">
	    INSERT INTO station_measurements (
	      station_name, measure_time, pm10, pm2_5, sido_name
	    )
	    VALUES 
	    <foreach collection="list" item="dto" separator=",">
	        (#{dto.stationName}, #{dto.measureTime}, #{dto.pm10}, #{dto.pm2_5}, #{dto.sidoName})
	    </foreach>
	    ON CONFLICT (station_name, measure_time)
	    DO UPDATE SET
	      pm10 = EXCLUDED.pm10,
	      pm2_5 = EXCLUDED.pm2_5;
	</insert>
	
	<select id="getActiveDustStations" resultType="String">
	    SELECT station_name AS stationName
	    FROM dust_station
	    WHERE station_active = true
	    ORDER BY station_name
	</select>
	
	<select id="getDustMeasurements" parameterType="String" resultType="DustDto">
	    SELECT  
	        m.station_name AS stationName,
	        m.measure_time AS measureTime,
	        m.pm10         AS pm10,
	        m.pm2_5        AS pm2_5,
	        m.sido_name    AS sidoName,
	        s.dmx          AS lon,
	        s.dmy          AS lat
	    FROM station_measurements m
	    JOIN dust_station s 
	         ON m.station_name = s.station_name
	    WHERE m.sido_name = #{sido}
	      AND m.measure_time >= NOW() - INTERVAL '7 days'
	      AND s.station_active = true
	    ORDER BY m.measure_time ASC
	</select>

	
	<select id="getLatestDustData" resultType="DustDto">
	    SELECT 
	        s.station_name AS stationName,
	        m.measure_time AS measureTime,
	        m.pm10,
	        m.pm2_5,
	        m.sido_name    AS sidoName,
	        s.dmx          AS lon,
	        s.dmy          AS lat
	    FROM dust_station s
	    JOIN LATERAL (
	        SELECT m.*
	        FROM station_measurements m
	        WHERE m.station_name = s.station_name
	        ORDER BY m.measure_time DESC
	        LIMIT 1
	    ) m ON true
	    WHERE s.station_active = true
	    ORDER BY s.station_name;
	</select>
	
	<insert id="fetchDustForecast" parameterType="DustForecastDto">
      INSERT INTO dust_forecast (
        data_time,
        inform_code,
        inform_overall,
        inform_cause,
        inform_grade,
        action_knack
      )
      VALUES (
        #{dataTime},
        #{informCode},
        #{informOverall},
        #{informCause},
        #{informGrade},
        #{actionKnack}
      )
      ON CONFLICT (data_time, inform_code)
      DO UPDATE SET
        inform_overall = EXCLUDED.inform_overall,
        inform_cause   = EXCLUDED.inform_cause,
        inform_grade   = EXCLUDED.inform_grade,
        action_knack   = EXCLUDED.action_knack;
    </insert>
		
	<insert id="upsertForecastImg" parameterType="DustForecastDto">
	  INSERT INTO forecast_img (
	    data_time,
	    inform_code,
	    type,
	    path
	  )
	  VALUES (
	    #{dataTime},
	    #{informCode},
	    #{type},
	    #{path}
	  )
	  ON CONFLICT (data_time, inform_code)
	  DO UPDATE SET
	    type = EXCLUDED.type,
	    path = EXCLUDED.path;
	</insert>
  	
  	<select id="getForecastData" parameterType="DustForecastDto" resultType="DustForecastDto">
	  SELECT 
	    f.data_time     AS dataTime,
	    f.inform_code   AS informCode,
	    f.inform_overall AS informOverall,
	    f.inform_cause  AS informCause,
	    f.inform_grade  AS informGrade,
	    f.action_knack  AS actionKnack,
	    i.path          AS path,
	    i.type          AS type
	  FROM dust_forecast f
	  LEFT JOIN forecast_img i
	    ON f.data_time = i.data_time
	   AND f.inform_code = i.inform_code
	  WHERE f.inform_code = #{informCode}
	    AND f.data_time LIKE CONCAT(#{dataTime, jdbcType=VARCHAR}, '%')
	  ORDER BY f.data_time DESC
	  LIMIT 1
	</select>
  
</mapper>
	