<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="egovframework.DamageMapper">
	<select id="findLatestByManagecode" parameterType="int"
		resultType="map">
		select dmgins.inscode,
			   dmgins.managecode,
			  (dmgins.crackcnt * cons.crack) as crack,
			  (dmgins.elecleakcnt * cons.elecleak) as elecleak,
			  (dmgins.leakcnt * cons.leak) as leak,
			  (dmgins.variationcnt * cons.variation) as variation,
			  (dmgins.abnormalitycnt * cons.abnormality) as abnormality,
			  dmgins.ins_date,
			  dmgins.inspactor
		from
			(select *
			 from damage_inspect
			 where managecode = #{managecode}
			 ORDER BY inscode DESC
			 LIMIT 1) dmgins
		left join constimp cons on dmgins.managecode = cons.managecode
	</select>
	
	<insert id="saveInspect">
		INSERT INTO damage_inspect (inscode, managecode, crackcnt, elecleakcnt, leakcnt, variationcnt, abnormalitycnt, ins_date, inspactor)
		VALUES (nextval('damage_inscode_seq'), #{managecode}, #{crackcnt}, #{elecleakcnt}, #{leakcnt}, #{variationcnt}, #{abnormalitycnt}, #{ins_date}, #{inspactor})
	</insert>
	
	
	<select id="getFindByInscode" parameterType="int" resultType="Damage_InspectDto">
		select dmgins.inscode,
			   dmgins.managecode,
			   dmgins.crackcnt,
			   dmgins.elecleakcnt,
			   dmgins.leakcnt,
			   dmgins.variationcnt,
			   dmgins.abnormalitycnt,
			  (dmgins.crackcnt * cons.crack) as crack,
			  (dmgins.elecleakcnt * cons.elecleak) as elecleak,
			  (dmgins.leakcnt * cons.leak) as leak,
			  (dmgins.variationcnt * cons.variation) as variation,
			  (dmgins.abnormalitycnt * cons.abnormality) as abnormality,
			  dmgins.ins_date,
			  dmgins.inspactor
		from
			(select *
			 from damage_inspect
			 where inscode = #{value}
			 ) dmgins
		left join constimp cons on dmgins.managecode = cons.managecode
	</select>
		
	<select id="getDamageHistory" parameterType="int" resultType="map">
		SELECT 
		    dmg.ins_date,
		    (dmg.crackcnt       * cons.crack)       AS crack,
		    (dmg.elecleakcnt    * cons.elecleak)    AS elecleak,
		    (dmg.leakcnt        * cons.leak)        AS leak,
		    (dmg.variationcnt   * cons.variation)   AS variation,
		    (dmg.abnormalitycnt * cons.abnormality) AS abnormality
		FROM damage_inspect dmg
		LEFT JOIN constimp cons ON dmg.managecode = cons.managecode
		WHERE dmg.managecode = #{managecode}
		ORDER BY dmg.ins_date
	</select>

	<!-- 이미지 저장 -->
    <insert id="saveDamageImg" parameterType="DamageImgDto">
        INSERT INTO damage_img (inscode, managecode, img_loc, filename)
        VALUES (#{inscode}, #{managecode}, #{img_loc}, #{filename})
    </insert>
	
	<!-- 이미지 조회 -->
    <select id="findImagesByInscode" parameterType="int"
            resultType="DamageImgDto">
        SELECT inscode,
               managecode,
               img_loc,
               filename
        FROM damage_img
        WHERE inscode = #{inscode}
        ORDER BY img_loc
    </select>
	<!-- 균열 top5 -->
		<select id="findTop5Crack" resultType="map">
		WITH ranked AS (
		    SELECT d.managecode, d.inscode,
		           (d.crackcnt * c.crack) AS crack_risk,
		           ROW_NUMBER() OVER (PARTITION BY d.managecode ORDER BY d.inscode DESC) AS rn
		    FROM damage_inspect d
		    LEFT JOIN constimp c ON d.managecode = c.managecode
		),
		paired AS (
		    SELECT cur.managecode, cur.crack_risk, prev.crack_risk AS prev_crack_risk
		    FROM ranked cur
		    LEFT JOIN ranked prev 
		           ON cur.managecode = prev.managecode AND prev.rn = 2
		    WHERE cur.rn = 1
		)
		SELECT s.managecode,
		       s.name, 
		       s.type,
		       (p.crack_risk - COALESCE(p.prev_crack_risk,0)) AS diff
		FROM paired p
		JOIN structure s ON p.managecode = s.managecode 
		ORDER BY diff DESC
		LIMIT 5
		</select>
  	
  	<!-- 누전 top5 -->
		<select id="findTop5elecleak" resultType="map">
		WITH ranked AS (
		    SELECT d.managecode, d.inscode,
		           (d.elecleakcnt * c.elecleak) AS elecleak_risk,
		           ROW_NUMBER() OVER (PARTITION BY d.managecode ORDER BY d.inscode DESC) AS rn
		    FROM damage_inspect d
		    LEFT JOIN constimp c ON d.managecode = c.managecode
		),
		paired AS (
		    SELECT cur.managecode, cur.elecleak_risk, prev.elecleak_risk AS prev_elecleak_risk
		    FROM ranked cur
		    LEFT JOIN ranked prev 
		           ON cur.managecode = prev.managecode AND prev.rn = 2
		    WHERE cur.rn = 1
		)
		SELECT s.managecode,
		       s.name,  
		       s.type,
		       (p.elecleak_risk - COALESCE(p.prev_elecleak_risk,0)) AS diff
		FROM paired p
		JOIN structure s ON p.managecode = s.managecode 
		ORDER BY diff DESC
		LIMIT 5
		</select>

	<!-- 누수 top5 -->
		<select id="findTop5leak" resultType="map">
		WITH ranked AS (
		    SELECT d.managecode, d.inscode,
		           (d.leakcnt * c.leak) AS leak_risk,
		           ROW_NUMBER() OVER (PARTITION BY d.managecode ORDER BY d.inscode DESC) AS rn
		    FROM damage_inspect d
		    LEFT JOIN constimp c ON d.managecode = c.managecode
		),
		paired AS (
		    SELECT cur.managecode, cur.leak_risk, prev.leak_risk AS prev_leak_risk
		    FROM ranked cur
		    LEFT JOIN ranked prev 
		           ON cur.managecode = prev.managecode AND prev.rn = 2
		    WHERE cur.rn = 1
		)
		SELECT s.managecode,
		       s.name,   
		       s.type,
		       (p.leak_risk - COALESCE(p.prev_leak_risk,0)) AS diff
		FROM paired p
		JOIN structure s ON p.managecode = s.managecode 
		ORDER BY diff DESC
		LIMIT 5
		</select>
		
	<!-- 변형 top5 -->
		<select id="findTop5variation" resultType="map">
		WITH ranked AS (
		    SELECT d.managecode, d.inscode,
		           (d.variationcnt * c.variation) AS variation_risk,
		           ROW_NUMBER() OVER (PARTITION BY d.managecode ORDER BY d.inscode DESC) AS rn
		    FROM damage_inspect d
		    LEFT JOIN constimp c ON d.managecode = c.managecode
		),
		paired AS (
		    SELECT cur.managecode, cur.variation_risk, prev.variation_risk AS prev_variation_risk
		    FROM ranked cur
		    LEFT JOIN ranked prev 
		           ON cur.managecode = prev.managecode AND prev.rn = 2
		    WHERE cur.rn = 1
		)
		SELECT s.managecode,
		       s.name,   
		       s.type,
		       (p.variation_risk - COALESCE(p.prev_variation_risk,0)) AS diff
		FROM paired p
		JOIN structure s ON p.managecode = s.managecode 
		ORDER BY diff DESC
		LIMIT 5
		</select>
		
		<!-- 구조이상 top5 -->
		<select id="findTop5abnormality" resultType="map">
		WITH ranked AS (
		    SELECT d.managecode, d.inscode,
		           (d.abnormalitycnt * c.abnormality) AS abnormality_risk,
		           ROW_NUMBER() OVER (PARTITION BY d.managecode ORDER BY d.inscode DESC) AS rn
		    FROM damage_inspect d
		    LEFT JOIN constimp c ON d.managecode = c.managecode
		),
		paired AS (
		    SELECT cur.managecode, cur.abnormality_risk, prev.abnormality_risk AS prev_abnormality_risk
		    FROM ranked cur
		    LEFT JOIN ranked prev 
		           ON cur.managecode = prev.managecode AND prev.rn = 2
		    WHERE cur.rn = 1
		)
		SELECT s.managecode,
		       s.name,   
		       s.type,
		       (p.abnormality_risk - COALESCE(p.prev_abnormality_risk,0)) AS diff
		FROM paired p
		JOIN structure s ON p.managecode = s.managecode 
		ORDER BY diff DESC
		LIMIT 5
		</select>
	
	<!-- 긴급점검 균열 -->
	<select id="findEmergencyCrack" resultType="map">
	  SELECT di.managecode      AS managecode,
	         s.type             AS type,
	         s.name             AS name,
	         (di.crackcnt * cons.crack) AS risk,
	         di.ins_date        AS ins_date
	  FROM damage_inspect di
	  JOIN structure s ON di.managecode = s.managecode
	  LEFT JOIN constimp cons ON di.managecode = cons.managecode
	  INNER JOIN (
	      SELECT managecode, MAX(ins_date) AS latest_date
	      FROM damage_inspect
	      GROUP BY managecode
	  ) latest 
	    ON di.managecode = latest.managecode AND di.ins_date = latest.latest_date
	  WHERE (di.crackcnt * cons.crack) >= 300
	  ORDER BY di.ins_date DESC
	</select>
	
	<!-- 긴급점검 누전 -->
	<select id="findEmergencyElecLeak" resultType="map">
	  SELECT di.managecode      AS managecode,
	         s.type             AS type,
	         s.name             AS name,
	         (di.elecleakcnt * cons.elecleak) AS risk,
	         di.ins_date        AS ins_date
	  FROM damage_inspect di
	  JOIN structure s ON di.managecode = s.managecode
	  LEFT JOIN constimp cons ON di.managecode = cons.managecode
	  INNER JOIN (
	      SELECT managecode, MAX(ins_date) AS latest_date
	      FROM damage_inspect
	      GROUP BY managecode
	  ) latest 
	    ON di.managecode = latest.managecode AND di.ins_date = latest.latest_date
	  WHERE (di.elecleakcnt * cons.elecleak) >= 300
	  ORDER BY di.ins_date DESC
	</select>
	
	<!-- 긴급점검 누수 -->
	<select id="findEmergencyLeak" resultType="map">
	  SELECT di.managecode      AS managecode,
	         s.type             AS type,
	         s.name             AS name,
	         (di.leakcnt * cons.leak) AS risk,
	         di.ins_date        AS ins_date
	  FROM damage_inspect di
	  JOIN structure s ON di.managecode = s.managecode
	  LEFT JOIN constimp cons ON di.managecode = cons.managecode
	  INNER JOIN (
	      SELECT managecode, MAX(ins_date) AS latest_date
	      FROM damage_inspect
	      GROUP BY managecode
	  ) latest 
	    ON di.managecode = latest.managecode AND di.ins_date = latest.latest_date
	  WHERE (di.leakcnt * cons.leak) >= 300
	  ORDER BY di.ins_date DESC
	</select>
	
	<!-- 긴급점검 변형 -->
	<select id="findEmergencyVariation" resultType="map">
	  SELECT di.managecode      AS managecode,
	         s.type             AS type,
	         s.name             AS name,
	         (di.variationcnt * cons.variation) AS risk,
	         di.ins_date        AS ins_date
	  FROM damage_inspect di
	  JOIN structure s ON di.managecode = s.managecode
	  LEFT JOIN constimp cons ON di.managecode = cons.managecode
	  INNER JOIN (
	      SELECT managecode, MAX(ins_date) AS latest_date
	      FROM damage_inspect
	      GROUP BY managecode
	  ) latest 
	    ON di.managecode = latest.managecode AND di.ins_date = latest.latest_date
	  WHERE (di.variationcnt * cons.variation) >= 300
	  ORDER BY di.ins_date DESC
	</select>
	
	<!-- 긴급점검 구조이상 -->
	<select id="findEmergencyAbnormality" resultType="map">
	  SELECT di.managecode      AS managecode,
	         s.type             AS type,
	         s.name             AS name,
	         (di.abnormalitycnt * cons.abnormality) AS risk,
	         di.ins_date        AS ins_date
	  FROM damage_inspect di
	  JOIN structure s ON di.managecode = s.managecode
	  LEFT JOIN constimp cons ON di.managecode = cons.managecode
	  INNER JOIN (
	      SELECT managecode, MAX(ins_date) AS latest_date
	      FROM damage_inspect
	      GROUP BY managecode
	  ) latest 
	    ON di.managecode = latest.managecode AND di.ins_date = latest.latest_date
	  WHERE (di.abnormalitycnt * cons.abnormality) >= 300
	  ORDER BY di.ins_date DESC
	</select>


	<select id="selectAvgRiskByDistrict" resultType="map">
	  WITH latest_ins AS (
	    SELECT di.*
	    FROM damage_inspect di
	    JOIN (
	      SELECT managecode, MAX(ins_date) AS latest_date
	      FROM damage_inspect
	      GROUP BY managecode
	    ) sub ON di.managecode = sub.managecode 
	          AND di.ins_date = sub.latest_date
	  )
		SELECT 
		  CASE
		    WHEN s.address LIKE '%마포%' THEN '마포구'
		    WHEN s.address LIKE '%서대문%' THEN '서대문구'
		    WHEN s.address LIKE '%종로%' THEN '종로구'
		    WHEN s.address LIKE '%은평%' THEN '은평구'
		  END AS GRAPH_DISTRICT,
		  (EXTRACT(YEAR FROM s.estdate)::int / 10) * 10 AS GRAPH_DECADE,
		  AVG(COALESCE(l.crackcnt,0) * COALESCE(c.crack,0))        AS GRAPH_CRACK_RISK,
		  AVG(COALESCE(l.elecleakcnt,0) * COALESCE(c.elecleak,0))  AS GRAPH_ELECLEAK_RISK,
		  AVG(COALESCE(l.leakcnt,0) * COALESCE(c.leak,0))          AS GRAPH_LEAK_RISK,
		  AVG(COALESCE(l.variationcnt,0) * COALESCE(c.variation,0))AS GRAPH_VARIATION_RISK,
		  AVG(COALESCE(l.abnormalitycnt,0) * COALESCE(c.abnormality,0)) AS GRAPH_ABNORMALITY_RISK
		FROM structure s
		LEFT JOIN latest_ins l ON s.managecode = l.managecode
		LEFT JOIN constimp c ON s.managecode = c.managecode
		WHERE s.address ~ '마포|서대문|종로|은평'
		GROUP BY GRAPH_DISTRICT, (EXTRACT(YEAR FROM s.estdate)::int / 10) * 10
		ORDER BY GRAPH_DECADE, GRAPH_DISTRICT

	</select>
		
</mapper>